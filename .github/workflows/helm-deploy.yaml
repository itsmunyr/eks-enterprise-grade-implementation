# GitHub Actions CI/CD Pipeline - Helm Deployment

name: CI/CD Pipeline - Helm

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: laravel
  IMAGE_TAG: ${{ github.sha }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: laravel_test
          POSTGRES_USER: laravel
          POSTGRES_PASSWORD: secret
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: pdo, pdo_pgsql, mbstring, xml, bcmath, redis
          coverage: pcov
      
      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
      
      - name: Install dependencies
        run: composer install --prefer-dist --no-interaction --no-scripts
      
      - name: Copy .env
        run: cp .env.testing .env
      
      - name: Generate key
        run: php artisan key:generate
      
      - name: Run tests
        env:
          DB_CONNECTION: pgsql
          DB_HOST: localhost
          DB_PORT: 5432
          DB_DATABASE: laravel_test
          DB_USERNAME: laravel
          DB_PASSWORD: secret
        run: ./vendor/bin/phpunit
      
      - name: Run PHPStan
        run: ./vendor/bin/phpstan analyse
      
      - name: Run PHP CS Fixer
        run: ./vendor/bin/php-cs-fixer fix --dry-run --diff

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
      
      - name: Run Composer Audit
        run: composer audit

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Build Docker image
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG \
                       -t ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:latest \
                       -f docker/app/Dockerfile .
      
      - name: Run Trivy vulnerability scanner on Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
        continue-on-error: true
      
      - name: Push Docker image to ECR
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:latest

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name laravel-eks-dev --region ${{ env.AWS_REGION }}
      
      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.13.0'
      
      - name: Deploy with Helm
        run: |
          helm upgrade --install laravel-app ./helm/charts/laravel-app \
            --namespace laravel-dev \
            --create-namespace \
            --set image.repository=${{ secrets.ECR_REGISTRY }}/$ECR_REPOSITORY \
            --set image.tag=$IMAGE_TAG \
            --values ./helm/values/dev.yaml \
            --wait \
            --timeout 10m
      
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/laravel-app -n laravel-dev
          kubectl get pods -n laravel-dev

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name laravel-eks-staging --region ${{ env.AWS_REGION }}
      
      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.13.0'
      
      - name: Deploy with Helm
        run: |
          helm upgrade --install laravel-app ./helm/charts/laravel-app \
            --namespace laravel-staging \
            --create-namespace \
            --set image.repository=${{ secrets.ECR_REGISTRY }}/$ECR_REPOSITORY \
            --set image.tag=$IMAGE_TAG \
            --values ./helm/values/staging.yaml \
            --wait \
            --timeout 10m
      
      - name: Run smoke tests
        run: |
          kubectl run smoke-test --rm -i --image=curlimages/curl --restart=Never -- \
            curl -f http://laravel-app.laravel-staging.svc.cluster.local/health

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name laravel-eks-prod --region ${{ env.AWS_REGION }}
      
      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.13.0'
      
      - name: Deploy with Helm
        run: |
          helm upgrade --install laravel-app ./helm/charts/laravel-app \
            --namespace laravel-prod \
            --create-namespace \
            --set image.repository=${{ secrets.ECR_REGISTRY }}/$ECR_REPOSITORY \
            --set image.tag=$IMAGE_TAG \
            --values ./helm/values/prod.yaml \
            --wait \
            --timeout 10m
      
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/laravel-app -n laravel-prod
          kubectl get pods -n laravel-prod
      
      - name: Run health check
        run: |
          kubectl run health-check --rm -i --image=curlimages/curl --restart=Never -- \
            curl -f http://laravel-app.laravel-prod.svc.cluster.local/health

  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: deploy-production
    environment: production
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name laravel-eks-prod --region ${{ env.AWS_REGION }}
      
      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.13.0'
      
      - name: Rollback Helm release
        run: helm rollback laravel-app -n laravel-prod

  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Cleanup old ECR images
        run: |
          IMAGES_TO_KEEP=10
          IMAGES=$(aws ecr list-images --repository-name $ECR_REPOSITORY --query 'imageIds[?imageTag!=`latest`]' --output json)
          IMAGE_COUNT=$(echo $IMAGES | jq '. | length')
          
          if [ $IMAGE_COUNT -gt $IMAGES_TO_KEEP ]; then
            IMAGES_TO_DELETE=$(echo $IMAGES | jq --arg keep $IMAGES_TO_KEEP '[. | sort_by(.imagePushedAt) | .[0:(-$keep|tonumber)]]')
            aws ecr batch-delete-image --repository-name $ECR_REPOSITORY --image-ids "$IMAGES_TO_DELETE"
          fi